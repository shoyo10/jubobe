// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "jubobe/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockServicer) CreateOrder(ctx context.Context, order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServicerMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockServicer)(nil).CreateOrder), ctx, order)
}

// ListPatients mocks base method.
func (m *MockServicer) ListPatients(ctx context.Context, opt *model.PatientOption) ([]model.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPatients", ctx, opt)
	ret0, _ := ret[0].([]model.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPatients indicates an expected call of ListPatients.
func (mr *MockServicerMockRecorder) ListPatients(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPatients", reflect.TypeOf((*MockServicer)(nil).ListPatients), ctx, opt)
}

// UpdateOrder mocks base method.
func (m *MockServicer) UpdateOrder(ctx context.Context, opt *model.OrderOption, in model.UpdateOrderInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, opt, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockServicerMockRecorder) UpdateOrder(ctx, opt, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockServicer)(nil).UpdateOrder), ctx, opt, in)
}
